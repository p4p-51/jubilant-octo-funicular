/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/content': {
    /** get all available content */
    get: {
      responses: {
        /** A list of all responses */
        200: {
          content: {
            'application/json': {
              moduleId: string;
              moduleName: string;
              length: number;
              stages: {
                name: string;
                id: number;
              }[];
            }[];
          };
        };
      };
    };
  };
  '/content/{moduleId}/{stageId}': {
    /** Get the content of a modules stage */
    get: {
      parameters: {
        path: {
          /** The module ID */
          moduleId: number;
          /** The stage ID */
          stageId: number;
        };
      };
      responses: {
        /** The content of a module stage */
        200: {
          content: {
            'application/json': {
              subtitle?: string;
              description?: string;
              sections?: {
                sectionTitle?: string;
                content?: string;
              }[];
            };
          };
        };
      };
    };
  };
  '/experiences': {
    /** Get all the experiences that the user has created */
    get: {
      responses: {
        /** All the situations that the user has created */
        200: {
          content: {
            'application/json': components['schemas']['ExperienceId'][];
          };
        };
      };
    };
    /** Add an experience for the user */
    put: {
      responses: {
        /** success */
        200: {
          content: {
            'application/json': {
              experienceId: number;
              success: boolean;
            };
          };
        };
      };
      /** The experience */
      requestBody: {
        content: {
          'application/json': components['schemas']['Experience'];
        };
      };
    };
  };
  '/experiences/{experienceId}/labels': {
    /** Add a label to an experience */
    post: {
      parameters: {
        path: {
          /** The numeric ID of the experience */
          experienceId: components['parameters']['experienceIdParam'];
        };
      };
      responses: {
        200: components['responses']['Success'];
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** The label to delete */
      requestBody: {
        content: {
          'application/json': {
            labels: components['schemas']['Labels'][];
          };
        };
      };
    };
    /** Remove certain labels from an experience */
    delete: {
      parameters: {
        path: {
          /** The numeric ID of the experience */
          experienceId: components['parameters']['experienceIdParam'];
        };
      };
      responses: {
        200: components['responses']['Success'];
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** The label to delete */
      requestBody: {
        content: {
          'application/json': {
            labels: components['schemas']['Labels'][];
          };
        };
      };
    };
  };
  '/modules/{moduleId}/feedback': {
    /** submit rating and feedback for a module */
    post: {
      parameters: {
        path: {
          /** The ID of the module */
          moduleId: components['parameters']['moduleIdParam'];
        };
      };
      responses: {
        /** Successfully submitted Feedback */
        200: {
          content: {
            'application/json': {
              success: boolean;
              nextStage: components['schemas']['ModuleStage'];
            };
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** Feedback and rating for the specific module */
      requestBody: {
        content: {
          'application/json': {
            rating: number;
            feedback: string;
          };
        };
      };
    };
  };
  '/modules/{moduleId}/quiz': {
    /** Submit the score for a module's quiz */
    post: {
      parameters: {
        path: {
          /** The ID of the module */
          moduleId: components['parameters']['moduleIdParam'];
        };
      };
      responses: {
        /** success */
        200: {
          content: {
            'application/json': {
              success?: boolean;
            };
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** Which quiz they're submitting and their score */
      requestBody: {
        content: {
          'application/json': {
            /** @enum {string} */
            stage: 'prelim' | 'end';
            numQuestion: number;
            numCorrect: number;
          };
        };
      };
    };
  };
  '/questions': {
    /** Get all the questions available, along with a list of the current user's relevant experiences */
    get: {
      responses: {
        /** A list of questions, each with a list of relevant experiences */
        200: {
          content: {
            'application/json': (components['schemas']['Question'] & {
              experiences?: components['schemas']['ExperienceId'][];
            })[];
          };
        };
      };
    };
  };
  '/questions/{questionId}/answers': {
    /** Get the answers by the user to a given question */
    get: {
      parameters: {
        path: {
          /** The id of the question */
          questionId: components['parameters']['questionIdParam'];
        };
      };
      responses: {
        /** A list of answers and experiences relating to the question (grouped by label id) */
        200: {
          content: {
            'application/json': {
              experience: components['schemas']['ExperienceId'];
              answer: components['schemas']['Answer'];
            };
          };
        };
      };
    };
    /** Submit an answer to a specific question */
    post: {
      parameters: {
        path: {
          /** The id of the question */
          questionId: components['parameters']['questionIdParam'];
        };
      };
      responses: {
        /** success */
        200: {
          content: {
            'application/json': {
              success?: boolean;
            };
          };
        };
      };
      /** An answer to a given question and response */
      requestBody: {
        content: {
          'application/json': {
            experienceId: number;
            answer: components['schemas']['Answer'];
          };
        };
      };
    };
  };
  '/labels': {
    /** Get all the labels */
    get: {
      responses: {
        /** labels */
        200: {
          content: {
            'application/json': {
              label?: components['schemas']['Labels'];
              /**
               * @example [
               *   {
               *     "questionId": "leadership_question_id_1",
               *     "questionText": "tell me about a time when you took charge of a project"
               *   }
               * ]
               */
              questions?: components['schemas']['Question'][];
            }[];
          };
        };
        /** Unexpected Error */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users/{userId}': {
    /** Get the profile and progress of a user */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the user */
          userId: components['parameters']['userIdParam'];
        };
      };
      responses: {
        /** A single user. */
        200: {
          content: {
            'application/json': {
              userName: string;
              avatar?: string;
              progress: components['schemas']['ModuleStage'];
            };
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/users/{userId}/complete': {
    /** Mark a module/stage as complete for a given using */
    post: {
      parameters: {
        path: {
          /** Numeric ID of the user */
          userId: components['parameters']['userIdParam'];
        };
      };
      responses: {
        /** user has successfully completed a stage */
        200: {
          content: {
            'application/json': {
              success: boolean;
              nextStage: components['schemas']['ModuleStage'];
            };
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** Request body */
      requestBody: {
        content: {
          'application/json': components['schemas']['ModuleStage'];
        };
      };
    };
  };
  '/users/{userId}/self-intro': {
    /** Get a user's self introduction */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the user */
          userId: components['parameters']['userIdParam'];
        };
      };
      responses: {
        /** Get a users self intro */
        200: {
          content: {
            'application/json': components['schemas']['SelfIntro'];
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** Set a user self introduction */
    post: {
      parameters: {
        path: {
          /** Numeric ID of the user */
          userId: components['parameters']['userIdParam'];
        };
      };
      responses: {
        200: components['responses']['Success'];
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
      /** User self intro */
      requestBody: {
        content: {
          'application/json': components['schemas']['SelfIntro'];
        };
      };
    };
  };
  '/users/{userId}/stats': {
    /** Get user stats */
    get: {
      parameters: {
        path: {
          /** Numeric ID of the user */
          userId: components['parameters']['userIdParam'];
        };
      };
      responses: {
        /** A users stats */
        200: {
          content: {
            'application/json': components['schemas']['Stats'];
          };
        };
        /** Something unexpected happened */
        default: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    ExperienceId: {
      /** @example ENGGEN115 */
      name: string;
      /** @example 1 */
      experienceId: number;
      labels?: components['schemas']['Labels'][];
    };
    Experience: {
      /** @example ENGGEN115 */
      name: string;
      labels?: components['schemas']['Labels'][];
    };
    /** @enum {string} */
    Module: 'self-intro' | 'exp' | 'grad';
    ModuleStage: {
      moduleId: components['schemas']['Module'];
      /** @example 1 */
      stage: number;
    };
    Answer: {
      /** @example <Description of Situation> */
      s: string;
      /** @example <Description of Task> */
      t: string;
      /** @example <Description of Action> */
      a: string;
      /** @example <Description of Result> */
      r: string;
    };
    Question: {
      /** @example question_id */
      questionId: number;
      /** @example tell me about a time... */
      questionText: string;
      labelId: components['schemas']['Labels'];
    };
    Success: {
      success: boolean;
    };
    Error: {
      code: number;
      message: string;
    };
    /** @enum {string} */
    Labels: 'leadership' | 'teamwork' | 'conflict';
    SelfIntro: {
      /** @example my name is Bob, and I am a 3rd year SE student... */
      body: string;
      /**
       * @example [
       *   "name",
       *   "education",
       *   "experience"
       * ]
       */
      attributes: string[];
    };
    Stats: {
      accuracy: {
        before: number;
        after: number;
      };
      numExperiences: number;
      numQuestionsAnswered: number;
      /**
       * @example [
       *   "Self Introduction",
       *   "Organising Situations",
       *   "Structuring Responses",
       *   "Allocating Situations",
       *   "Mannerisms"
       * ]
       */
      completedModules: string[];
    };
  };
  responses: {
    /** The specified request was successful */
    Success: {
      content: {
        'application/json': components['schemas']['Success'];
      };
    };
    /** The specified resource was not found */
    NotFound: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** Unauthorized */
    Unauthorized: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: {
    /** @description The numeric ID of the experience */
    experienceIdParam: number;
    /** @description The ID of the module */
    moduleIdParam: components['schemas']['Module'];
    /** @description The id of the question */
    questionIdParam: number;
    /** @description Numeric ID of the user */
    userIdParam: number;
  };
}

export interface operations {}

export interface external {}
